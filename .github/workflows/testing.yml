# The name of the workflow.
# This is the name that's displayed for status
name: Dissertation Web Application - Build and Linting

# Trigger this workflow on a push, or pull request to
# the main branch, when either C# or project files changed
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Create an environment variable named DOTNET_VERSION
# and set it as "7.0.x"
env:
  DOTNET_VERSION: '7.0.x' # The .NET SDK version to use

# Defines a single job named "build-and-test"
jobs:
  build-and-test:

    # When the workflow runs, this is the name that is logged
    name: build-and-test-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        
    #set the working directory
    defaults:
      run:
        working-directory: ./Dissertation_Interface

    # Each job run contains these five steps
    steps:
      
      # 1) Check out the source code so that the workflow can access it.
      - uses: actions/checkout@v2
      
      # 2) Set up the .NET CLI environment for the workflow to use.
      #    The .NET version is specified by the environment variable.
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      # 3) Restore the dependencies and tools of a project or solution.
      - name: Install dependencies
        run: dotnet restore
      
      # 4) Build a project or solution and all of its dependencies.
      - name: Build
        run: dotnet build --configuration Release --no-restore
      
      # 5) Test a project or solution.
      - name: Test
        run: dotnet test --no-restore --verbosity normal
        
      - name: Install tools for Coverage Report
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-reportgenerator-globaltool
          dotnet tool install dotnet-coverage
          
      - name: Run the unit tests with code coverage
        run: dotnet coverage collect dotnet test --output ${{ github.workspace }}/Tests/Coverage --output-format cobertura --settings CodeCoverage.runsettings
          
      - name: Generate Report
        run: |
          dotnet reportgenerator -reports:${{ github.workspace }}/Tests/Coverage.cobertura.xml -targetdir:"${{ github.workspace }}/Tests/coveragereport" -reporttypes:Html